from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError
import pandas as pd
from pathlib import Path
import json
from config.config import Config
from tools.debug import logger


class DBPostgresqlGradio:
    """sqlalchemy + psycopg[binary] ‚Äî MIT License"""

    BASE_DIR = Path(__file__).parent

    def __init__(self, dbname: str, user: str, password: str, host: str, port: int):
        self.connection_url = f"postgresql+psycopg://{user}:{password}@{host}:{port}/{dbname}"
        self.engine = create_engine(self.connection_url)

    # ===============================================================
    # üîπ –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´
    # ===============================================================

    def select(self, sql: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å SELECT –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π."""
        with self.engine.connect() as conn:
            result = conn.execute(text(sql))
            return [tuple(row) for row in result.fetchall()]

    def select_dataframe(self, sql: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å SELECT –∏ –≤–µ—Ä–Ω—É—Ç—å pandas DataFrame."""
        return pd.read_sql(sql, self.engine)

    def insert(self, sql: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å INSERT/UPDATE/DELETE."""
        with self.engine.begin() as conn:
            conn.execute(text(sql))

    def execute_without_transaction(self, sql: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∞–≤—Ç–æ–∫–æ–º–º–∏—Ç)."""
        with self.engine.connect() as conn:
            conn.execution_options(isolation_level="AUTOCOMMIT").execute(text(sql))

    def select_as_dict(self, sql: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å SELECT –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π."""
        with self.engine.connect() as conn:
            result = conn.execute(text(sql))
            return [dict(row._mapping) for row in result.fetchall()]

    # ===============================================================
    # üîπ 1. –í–´–ü–û–õ–ù–ï–ù–ò–ï SQL-–§–ê–ô–õ–ê
    # ===============================================================

    def execute_sql_file(self, relative_path: str):
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL-—Ñ–∞–π–ª –ø–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—É—Ç–∏.
        –ü—Ä–∏–º–µ—Ä: db.execute_sql_file('sql/init_tree_table.sql')
        """
        sql_path = self.BASE_DIR / relative_path
        if not sql_path.exists():
            raise FileNotFoundError(f"SQL —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {sql_path}")

        with open(sql_path, "r", encoding="utf-8") as f:
            sql_script = f.read()

        try:
            with self.engine.begin() as conn:
                conn.execute(text(sql_script))
            logger.success(f"SQL —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {relative_path}")
        except SQLAlchemyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL —Ñ–∞–π–ª–∞ {relative_path}: {e}")
            raise

    # ===============================================================
    # üîπ 2. –†–ï–ö–£–†–°–ò–í–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ï–†–ï–í–ê
    # ===============================================================

    def get_tree_as_json(self):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tree_nodes –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –≤–∏–¥–µ JSON:
        —Ç–æ–ª—å–∫–æ {"name": ..., "children": [...]} –±–µ–∑ id –∏ parent_id.
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ –ª—é–±–æ–π –≥–ª—É–±–∏–Ω—ã.
        """
        sql = """
        WITH RECURSIVE tree_paths AS (
            -- –ö–æ—Ä–Ω–µ–≤—ã–µ —É–∑–ª—ã
            SELECT 
                id,
                name,
                parent_id,
                ARRAY[id] as path,
                1 as level
            FROM prompt_tree 
            WHERE parent_id IS NULL
            
            UNION ALL
            
            -- –î–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
            SELECT 
                t.id,
                t.name,
                t.parent_id,
                tp.path || t.id,
                tp.level + 1
            FROM prompt_tree t
            JOIN tree_paths tp ON t.parent_id = tp.id
        )
        SELECT 
            id,
            name,
            parent_id,
            path,
            level
        FROM tree_paths
        ORDER BY path;
        """
        
        nodes = self.select_as_dict(sql)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–∑–ª–∞–º –ø–æ id
        node_map = {}
        for node in nodes:
            node_map[node['id']] = {
                'name': node['name'],
                'children': [],
                'level': node['level']
            }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É–∑–ª—ã –ø–æ —É—Ä–æ–≤–Ω—é (–æ—Ç —Å–∞–º–æ–≥–æ –≥–ª—É–±–æ–∫–æ–≥–æ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É)
        # —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–¥ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º–∏
        sorted_nodes = sorted(nodes, key=lambda x: x['level'], reverse=True)
        
        # –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
        root_nodes = []
        for node in sorted_nodes:
            current_node = node_map[node['id']]
            
            if node['parent_id'] is None:
                # –≠—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª
                root_nodes.append({
                    'name': current_node['name'],
                    'children': current_node['children']
                })
            else:
                # –≠—Ç–æ –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ —Ä–æ–¥–∏—Ç–µ–ª—é
                parent_node = node_map.get(node['parent_id'])
                if parent_node:
                    parent_node['children'].append({
                        'name': current_node['name'],
                        'children': current_node['children']
                    })
        
        # –ö–æ—Ä–Ω–µ–≤—ã–µ —É–∑–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        root_nodes.reverse()
        return root_nodes

    # ===============================================================
    # üîπ 3. –ó–ê–ì–†–£–ó–ö–ê JSON-–§–ê–ô–õ–ê –í –¢–ê–ë–õ–ò–¶–£
    # ===============================================================

    def load_json_to_tree(self, relative_json_path: str):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON –¥–µ—Ä–µ–≤–æ –≤ —Ç–∞–±–ª–∏—Ü—É prompt_tree.
        –ü—Ä–∏–º–µ—Ä: db.load_json_to_tree('data/tree.json')
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –ª—é–±–æ–π –≥–ª—É–±–∏–Ω—ã.
        """
        json_path = self.BASE_DIR / relative_json_path
        if not json_path.exists():
            raise FileNotFoundError(f"JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")

        with open(json_path, "r", encoding="utf-8") as f:
            data = json.load(f)

        def insert_node(conn, name, parent_id=None):
            sql = text("""
                INSERT INTO prompt_tree (name, parent_id)
                VALUES (:name, :parent_id)
                RETURNING id;
            """)
            result = conn.execute(sql, {"name": name, "parent_id": parent_id})
            return result.scalar()

        def insert_children(conn, items, parent_id=None):
            for item in items:
                # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª
                node_id = insert_node(conn, item["name"], parent_id)
                
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ç–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if "children" in item and item["children"]:
                    insert_children(conn, item["children"], node_id)

        try:
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞
            with self.engine.begin() as conn:
                conn.execute(text("TRUNCATE TABLE prompt_tree RESTART IDENTITY CASCADE;"))
                # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ
                insert_children(conn, data)
            logger.success(f"JSON –¥–µ—Ä–µ–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ {relative_json_path}")
        except SQLAlchemyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON –¥–µ—Ä–µ–≤–∞: {e}")
            raise

try:
    db = DBPostgresqlGradio(
        Config.DB_NAME,
        Config.DB_USER,
        Config.DB_PASSWORD,
        Config.DB_HOST,
        Config.DB_PORT
    )
    logger.success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
except SQLAlchemyError as e:
    logger.error(f"–û—à–∏–±–∫–∞ SQLAlchemy: {e}")
    db = None
except Exception as e:
    logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    db = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
#db.execute_sql_file("sql/create_prompt_tree.sql")
#db.load_json_to_tree("json/prompt_tree.json")
#print(db.get_tree_as_json())