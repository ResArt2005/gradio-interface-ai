from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError
import pandas as pd
from pathlib import Path
import json
from config.config import Config
from tools.debug import logger


class DBPostgresqlGradio:
    """sqlalchemy + psycopg[binary] ‚Äî MIT License"""

    BASE_DIR = Path(__file__).parent

    def __init__(self, dbname: str, user: str, password: str, host: str, port: int):
        self.connection_url = f"postgresql+psycopg://{user}:{password}@{host}:{port}/{dbname}"
        self.engine = create_engine(self.connection_url)

    # ===============================================================
    # üîπ –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´
    # ===============================================================

    def select(self, sql: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å SELECT –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π."""
        with self.engine.connect() as conn:
            result = conn.execute(text(sql))
            return [tuple(row) for row in result.fetchall()]

    def select_dataframe(self, sql: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å SELECT –∏ –≤–µ—Ä–Ω—É—Ç—å pandas DataFrame."""
        return pd.read_sql(sql, self.engine)

    def insert(self, sql: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å INSERT/UPDATE/DELETE."""
        with self.engine.begin() as conn:
            conn.execute(text(sql))

    def execute_without_transaction(self, sql: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∞–≤—Ç–æ–∫–æ–º–º–∏—Ç)."""
        with self.engine.connect() as conn:
            conn.execution_options(isolation_level="AUTOCOMMIT").execute(text(sql))

    def select_as_dict(self, sql: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å SELECT –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π."""
        with self.engine.connect() as conn:
            result = conn.execute(text(sql))
            return [dict(row._mapping) for row in result.fetchall()]

    # ===============================================================
    # üîπ 1. –í–´–ü–û–õ–ù–ï–ù–ò–ï SQL-–§–ê–ô–õ–ê
    # ===============================================================

    def execute_sql_file(self, relative_path: str):
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL-—Ñ–∞–π–ª –ø–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—É—Ç–∏.
        –ü—Ä–∏–º–µ—Ä: db.execute_sql_file('sql/init_tree_table.sql')
        """
        sql_path = self.BASE_DIR / relative_path
        if not sql_path.exists():
            raise FileNotFoundError(f"SQL —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {sql_path}")

        with open(sql_path, "r", encoding="utf-8") as f:
            sql_script = f.read()

        try:
            with self.engine.begin() as conn:
                conn.execute(text(sql_script))
            logger.success(f"SQL —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {relative_path}")
        except SQLAlchemyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL —Ñ–∞–π–ª–∞ {relative_path}: {e}")
            raise

    # ===============================================================
    # üîπ 2. –†–ï–ö–£–†–°–ò–í–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ï–†–ï–í–ê
    # ===============================================================

    def get_tree_as_json(self):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tree_nodes –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –≤–∏–¥–µ JSON:
        —Ç–æ–ª—å–∫–æ {"name": ..., "children": [...]} –±–µ–∑ id –∏ parent_id.
        """
        sql = """
        SELECT id, name, parent_id
        FROM prompt_tree
        ORDER BY id;
        """
        nodes = self.select_as_dict(sql)

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö —É–∑–ª–æ–≤ {id: {"name": ..., "children": []}}
        node_map = {n["id"]: {"name": n["name"], "children": []} for n in nodes}

        # –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ä–µ–≤–æ
        for n in nodes:
            parent_id = n["parent_id"]
            if parent_id:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª –≤ children —Ä–æ–¥–∏—Ç–µ–ª—è
                node_map[parent_id]["children"].append(node_map[n["id"]])

        # –ö–æ—Ä–Ω–µ–≤—ã–µ —É–∑–ª—ã ‚Äî —ç—Ç–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö parent_id is None
        root_nodes = [node_map[n["id"]] for n in nodes if n["parent_id"] is None]

        return root_nodes

    # ===============================================================
    # üîπ 3. –ó–ê–ì–†–£–ó–ö–ê JSON-–§–ê–ô–õ–ê –í –¢–ê–ë–õ–ò–¶–£
    # ===============================================================

    def load_json_to_tree(self, relative_json_path: str):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON –¥–µ—Ä–µ–≤–æ –≤ —Ç–∞–±–ª–∏—Ü—É prompt_tree.
        –ü—Ä–∏–º–µ—Ä: db.load_json_to_tree('data/tree.json')
        """
        json_path = self.BASE_DIR / relative_json_path
        if not json_path.exists():
            raise FileNotFoundError(f"JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")

        with open(json_path, "r", encoding="utf-8") as f:
            data = json.load(f)

        def insert_node(conn, name, parent_id=None):
            sql = text("""
                INSERT INTO prompt_tree (name, parent_id)
                VALUES (:name, :parent_id)
                RETURNING id;
            """)
            result = conn.execute(sql, {"name": name, "parent_id": parent_id})
            return result.scalar()

        def insert_children(conn, items, parent_id=None):
            for item in items:
                node_id = insert_node(conn, item["name"], parent_id)
                if item.get("children"):
                    insert_children(conn, item["children"], node_id)

        try:
            with self.engine.begin() as conn:
                insert_children(conn, data)
            logger.success(f"JSON –¥–µ—Ä–µ–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ {relative_json_path}")
        except SQLAlchemyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON –¥–µ—Ä–µ–≤–∞: {e}")
            raise

try:
    db = DBPostgresqlGradio(
        Config.DB_NAME,
        Config.DB_USER,
        Config.DB_PASSWORD,
        Config.DB_HOST,
        Config.DB_PORT
    )
    logger.success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
except SQLAlchemyError as e:
    logger.error(f"–û—à–∏–±–∫–∞ SQLAlchemy: {e}")
    db = None
except Exception as e:
    logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    db = None

#db.execute_sql_file("sql/create_prompt_tree.sql")
#db.load_json_to_tree("json/prompt_tree.json")
#print(db.get_tree_as_json())