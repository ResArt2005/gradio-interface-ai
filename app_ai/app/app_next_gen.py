import gradio as gr
import requests
from datetime import datetime
from zoneinfo import ZoneInfo
import os, sys
import uuid
from pathlib import Path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from tools.fast_prompt_script import tree

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
FASTAPI_URL = "http://host.docker.internal:8000/query"
BASE_DIR = Path(__file__).parent
# --- –ó–∞–≥—Ä—É–∑–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ ---
try:
    with open(BASE_DIR / "../static/styles.css", "r", encoding="utf-8") as f:
        CUSTOM_CSS = f.read()
except FileNotFoundError:
    CUSTOM_CSS = ""
    print("‚ö†Ô∏è  –§–∞–π–ª styles.css –Ω–µ –Ω–∞–π–¥–µ–Ω")

try:
    with open(BASE_DIR / "../static/script.js", "r", encoding="utf-8") as f:
        CUSTOM_JS = f.read()
except FileNotFoundError:
    CUSTOM_JS = ""
    print("‚ö†Ô∏è  –§–∞–π–ª script.js –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- –í—Å—Ç–∞–≤–∫–∞ CSS –∏ JS –≤ <head> —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
custom_head = f"""
<style>
{CUSTOM_CSS}
</style>
<script type="text/javascript">
// –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', function () {{
    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ IIFE, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    (function () {{
        {CUSTOM_JS}
    }})();
}});
</script>
"""

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤—Ä–µ–º–µ–Ω–µ–º ---
def format_message(role, content):
    tz = os.getenv("TZ", "UTC")
    time_str = datetime.now(ZoneInfo(tz)).strftime("%H:%M:%S")
    name = "üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**" if role == "user" else "ü§ñ **–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç**"
    return f"{name} [{time_str}]:\n\n{content}"

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def add_user_message(message, chat_id, chat_sessions, chat_titles):
    if chat_id not in chat_sessions:
        chat_sessions[chat_id] = []
        title = f"–ù–æ–≤—ã–π —á–∞—Ç {len(chat_titles) + 1}"
        chat_titles.append((title, chat_id))

    user_msg = {"role": "user", "content": format_message("user", message)}
    chat_sessions[chat_id].append(user_msg)

    value = None
    if len(chat_sessions[chat_id]) == 1:
        short_title = " ".join(message.strip().split()[:4]) + ("..." if len(message.strip().split()) > 4 else "")
        chat_titles = [(short_title if cid == chat_id else title, cid) for title, cid in chat_titles]
        value = short_title

    active_title = next((title for title, cid in chat_titles if cid == chat_id), None)
    return "", chat_sessions[chat_id], chat_sessions, chat_titles, gr.update(
        choices=[t[0] for t in chat_titles],
        value=value or active_title
    )

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM —á–µ—Ä–µ–∑ FastAPI ---
def fetch_llm_answer(_, chat_id, chat_sessions):
    if chat_id not in chat_sessions:
        return [{"role": "assistant", "content": "–û—à–∏–±–∫–∞: –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."}], chat_sessions

    history = chat_sessions[chat_id]
    try:
        last_user_msg = history[-1]['content'].split(']:\n\n', 1)[-1]
        response = requests.post(FASTAPI_URL, json={'query': last_user_msg}, timeout=180)
        data = response.json()
        answer = data.get('answer', '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω')
        sources = data.get('sources', [])
    except Exception as e:
        answer = f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}'
        sources = []

    formatted = format_message('assistant', answer)
    if sources:
        formatted += '\n\n<details><summary>üìé <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏</b></summary>\n\n'
        for i, src in enumerate(sources, 1):
            title = src.get('doc_title', '–ò—Å—Ç–æ—á–Ω–∏–∫')
            page = src.get('page', '')
            snippet = src.get('snippet', '')
            url = src.get('url', '#')
            formatted += f'- <a href="{url}" target="_blank">{title}, —Å—Ç—Ä. {page}</a>\n'
            formatted += f'  > {snippet.strip()}\n\n'
        formatted += '</details>'

    chat_sessions[chat_id].append({'role': 'assistant', 'content': formatted})
    return chat_sessions[chat_id], chat_sessions

# --- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ ---
def new_chat(chat_sessions, chat_titles):
    new_id = str(uuid.uuid4())
    if any(cid == new_id for _, cid in chat_titles):
        return new_id, chat_sessions, chat_titles, gr.update(choices=[t[0] for t in chat_titles])
    chat_sessions[new_id] = []
    title = f"–ù–æ–≤—ã–π —á–∞—Ç {len(chat_titles) + 1}"
    chat_titles.append((title, new_id))
    return new_id, chat_sessions, chat_titles, gr.update(choices=[t[0] for t in chat_titles], value=title)

# --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ ---
def switch_chat(title, chat_titles, chat_sessions):
    for t, cid in chat_titles:
        if t == title:
            return cid, chat_sessions[cid] if cid in chat_sessions else []
    return gr.update(), []

# --- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ ---
def rename_chat(new_title, current_chat_id, chat_titles):
    if not new_title.strip():
        return gr.update(), gr.update(), ""
    chat_titles = [(new_title if cid == current_chat_id else title, cid) for title, cid in chat_titles]
    return (
        chat_titles,
        gr.update(choices=[t[0] for t in chat_titles], value=new_title),
        ""  # –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
    )

# -----------------------------
# --- –ß–∏–ø—ã (–∫–Ω–æ–ø–∫–∏) –Ω–∞–¥ –≤–≤–æ–¥–æ–º ---
# -----------------------------
def max_buttons_in_tree(node_list):
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ siblings –Ω–∞ –ª—é–±–æ–º —É—Ä–æ–≤–Ω–µ
    if not node_list:
        return 0
    maxw = len(node_list)
    for n in node_list:
        children = n.get("children", [])
        if children:
            w = max_buttons_in_tree(children)
            if w > maxw:
                maxw = w
    return maxw

MAX_BUTTONS = max_buttons_in_tree(tree)

def format_buttons_for_level(nodes):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ gr.update –¥–ª—è –≤—Å–µ—Ö MAX_BUTTONS –∫–Ω–æ–ø–æ–∫."""
    updates = []
    for i in range(MAX_BUTTONS):
        if i < len(nodes):
            updates.append(gr.update(value=nodes[i]["name"], visible=True))
        else:
            updates.append(gr.update(visible=False))
    return updates

def chip_click(index, current_nodes_val, top_tree_val, suppress_reset_val, current_text):
    """
    –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —á–∏–ø:
      - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ textbox
      - –µ—Å–ª–∏ –µ—Å—Ç—å children ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
      - –µ—Å–ª–∏ –¥–µ—Ç–µ–π –Ω–µ—Ç ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
      - –ø–æ–º–µ—á–∞–µ–º suppress_reset True (—á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ textbox –Ω–µ —Å—á–∏—Ç–∞–ª–∞—Å—å —Ä—É—á–Ω–æ–π –ø—Ä–∞–≤–∫–æ–π)
    """
    no_ops = [gr.update() for _ in range(MAX_BUTTONS)]
    if not current_nodes_val or index >= len(current_nodes_val):
        return gr.update(), *no_ops, current_nodes_val, False

    node = current_nodes_val[index]
    node_name = node.get("name", "")
    children = node.get("children", [])

    # –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç (–∫–Ω–æ–ø–∫–∏ —Å–∫—Ä—ã—Ç—ã)
    new_level = children if children else []

    # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    new_text = (current_text.strip() + " " + node_name) if current_text.strip() else node_name

    btn_updates = format_buttons_for_level(new_level)
    return gr.update(value=new_text), *btn_updates, new_level, True

def on_textbox_change(text, current_nodes_val, suppress_reset_val, top_tree_val):
    """
    –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ textbox:
      - –µ—Å–ª–∏ suppress_reset == True => —ç—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      - –∏–Ω–∞—á–µ => –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é –∏–∑–º–µ–Ω–∏–ª —Ç–µ–∫—Å—Ç => —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —á–∏–ø—ã –Ω–∞ –∫–æ—Ä–µ–Ω—å
      - –µ—Å–ª–∏ –∫–æ—Ä–µ–Ω—å –ø—É—Å—Ç–æ–π ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    """
    if suppress_reset_val:
        no_ops = [gr.update() for _ in range(MAX_BUTTONS)]
        return (*no_ops, current_nodes_val, False)
    else:
        btn_updates = format_buttons_for_level(top_tree_val if top_tree_val else [])
        return (*btn_updates, top_tree_val if top_tree_val else [], False)

def reset_to_root(top_tree_val):
    """–°–±—Ä–æ—Å —á–∏–ø–æ–≤ –Ω–∞ –∫–æ—Ä–µ–Ω—å (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ submit)."""
    btn_updates = format_buttons_for_level(top_tree_val)
    return (*btn_updates, top_tree_val, False)

# -----------------------------
# --- Gradio –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
# -----------------------------
with gr.Blocks(head=custom_head) as interface:
    gr.Markdown("## üí¨ –ß–∞—Ç —Å RAG")

    chat_sessions = gr.State({})
    current_chat_id = gr.State(str(uuid.uuid4()))
    chat_titles = gr.State([])

    # —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —á–∏–ø–æ–≤
    top_tree_state = gr.State(tree)
    current_nodes = gr.State(tree)      # —Ç–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä —É–∑–ª–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∏–¥–∏–º—ã–º —á–∏–ø–∞–º
    suppress_reset = gr.State(False)    # —Ñ–ª–∞–≥: –±—ã–ª–æ –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ textbox

    with gr.Row():
        with gr.Column(scale=1):
            new_chat_btn = gr.Button("+ –ù–æ–≤—ã–π —á–∞—Ç")
            chat_list = gr.Radio(choices=[], label="–ß–∞—Ç—ã", interactive=True)
            rename_box = gr.Textbox(placeholder="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —á–∞—Ç", lines=1, show_label=False)
            rename_btn = gr.Button("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å")
        with gr.Column(scale=4):
            chatbot = gr.Chatbot(
                label="–î–∏–∞–ª–æ–≥",
                render_markdown=True,
                type="messages",
                elem_id="resizable-chat"
            )

            # --- –ß–∏–ø—ã (–∫–Ω–æ–ø–∫–∏) –Ω–∞–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ ---
            with gr.Row(elem_id="chips_row"):
                chip_buttons = []
                for i in range(MAX_BUTTONS):
                    if i < len(tree):
                        lbl = tree[i]["name"]
                        visible = True
                    else:
                        lbl = ""
                        visible = False
                    b = gr.Button(value=lbl, visible=visible, elem_id=f"chip_{i}")
                    chip_buttons.append(b)

            textbox = gr.Textbox(placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å...", lines=1, show_label=False)
            clear = gr.Button(value="–û—á–∏—Å—Ç–∏—Ç—å", elem_id="clear_chat")

    # –ü—Ä–∏–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
    # –ö–∞–∂–¥—ã–π —á–∏–ø –≤—ã–∑—ã–≤–∞–µ—Ç chip_click —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º index
    btn:gr.Button
    for i, btn in enumerate(chip_buttons):
        btn.click(
            chip_click,
            inputs=[gr.State(i), current_nodes, top_tree_state, suppress_reset, textbox],
            outputs=[textbox, *chip_buttons, current_nodes, suppress_reset]
        )

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ textbox
    textbox.change(
        on_textbox_change,
        inputs=[textbox, current_nodes, suppress_reset, top_tree_state],
        outputs=[*chip_buttons, current_nodes, suppress_reset]
    )

    # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: add_user_message -> fetch_llm_answer -> reset_to_root
    textbox.submit(
        add_user_message,
        [textbox, current_chat_id, chat_sessions, chat_titles],
        [textbox, chatbot, chat_sessions, chat_titles, chat_list]
    ).then(
        fetch_llm_answer,
        [textbox, current_chat_id, chat_sessions],
        [chatbot, chat_sessions]
    ).then(
        reset_to_root,
        [top_tree_state],
        [*chip_buttons, current_nodes, suppress_reset]
    )

    # –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ (–æ—Å—Ç–∞–≤–∏–ª –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–∞–∫ –±—ã–ª–æ)
    clear.click(
        lambda: ([], None),
        None,
        [chatbot, chat_sessions]
    )

    # –ù–æ–≤—ã–π —á–∞—Ç
    new_chat_btn.click(
        new_chat,
        [chat_sessions, chat_titles],
        [current_chat_id, chat_sessions, chat_titles, chat_list]
    )

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–∞
    chat_list.change(
        switch_chat,
        [chat_list, chat_titles, chat_sessions],
        [current_chat_id, chatbot]
    )

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    rename_btn.click(
        rename_chat,
        [rename_box, current_chat_id, chat_titles],
        [chat_titles, chat_list, rename_box]
    )

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    interface.launch(
        server_name="0.0.0.0",
        server_port=7860,
        # auth=("user", "password")  # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    )
